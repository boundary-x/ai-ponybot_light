<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="cTd%760K,RTT#{B062jt" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="m7T^$wV/_sBkNk}U[`UY"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=빨간색(red)" line2="    Red = 0xFF0000," line3="    //% block=주황색(orange)" line4="    Orange = 0xFFA500," line5="    //% block=노란색(yellow)" line6="    Yellow = 0xFFFF00," line7="    //% block=초록색(green)" line8="    Green = 0x00FF00," line9="    //% block=파란색(blue)" line10="    Blue = 0x0000FF," line11="    //% block=남색(indigo)" line12="    Indigo = 0x4b0082," line13="    //% block=보라색(violet)" line14="    Violet = 0x8a2be2," line15="    //% block=흰색(white)" line16="    White = 0xFFFFFF" line17="}" numlines="18"></mutation><next><block type="typescript_statement" id="7Y/::;ZmcU6yD$`|S9ss"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB format)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB format)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="HFVsCn+`0Oe7?uoVN0/="><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace neopixel {" line1="    /**" line2="     * A NeoPixel strip" line3="     */" line4="    export class Strip {" line5="        buf: Buffer;" line6="        pin: DigitalPin;" line7="        // TODO: encode as bytes instead of 32bit" line8="        brightness: number;" line9="        start: number; // start offset in LED strip" line10="        _length: number; // number of LEDs" line11="        _mode: NeoPixelMode;" line12="        _matrixWidth: number; // number of leds in a matrix - if any" line13="" line14="        //--------------------------라이트 제어(기초)------------------------------------" line15="        /**" line16="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line17="         * @param rgb RGB color of the LED" line18="         */" line19="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip| 라이트를 모두 %rgb=neopixel_colors| 으로 켜기 &quot;" line20="        //% strip.defl=strip" line21="        //% weight=85 blockGap=8" line22="        //% group=&quot;라이트 제어(기초)&quot;" line23="        showColor(rgb: number) {" line24="            rgb = rgb &gt;&gt; 0;" line25="            this.setAllRGB(rgb);" line26="            this.show();" line27="        }" line28="" line29="" line30="        //--------------------------라이트 제어(심화)------------------------------------" line31="        /**" line32="         * Shows a rainbow pattern on all LEDs." line33="         * @param startHue the start hue value for the rainbow, eg: 1" line34="         * @param endHue the end hue value for the rainbow, eg: 360" line35="         */" line36="        //% group=&quot;라이트 제어(심화)&quot;" line37="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|라이트 무지개 효과 - 시작색: %startHue|, 종료색: %endHue&quot;" line38="        //% strip.defl=strip" line39="        //% weight=85 blockGap=8" line40="        //% startHue.min=1 startHue.max=360" line41="        //% endHue.min=1 endHue.max=360" line42="        showRainbow(startHue: number = 1, endHue: number = 360) {" line43="            if (this._length &lt;= 0) return;" line44="" line45="            startHue = startHue &gt;&gt; 0;" line46="            endHue = endHue &gt;&gt; 0;" line47="            const saturation = 100;" line48="            const luminance = 50;" line49="            const steps = this._length;" line50="            const direction = HueInterpolationDirection.Clockwise;" line51="" line52="            //hue" line53="            const h1 = startHue;" line54="            const h2 = endHue;" line55="            const hDistCW = ((h2 + 360) - h1) % 360;" line56="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line57="            const hDistCCW = ((h1 + 360) - h2) % 360;" line58="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line59="            let hStep: number;" line60="            if (direction === HueInterpolationDirection.Clockwise) {" line61="                hStep = hStepCW;" line62="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line63="                hStep = hStepCCW;" line64="            } else {" line65="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line66="            }" line67="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line68="" line69="            //sat" line70="            const s1 = saturation;" line71="            const s2 = saturation;" line72="            const sDist = s2 - s1;" line73="            const sStep = Math.idiv(sDist, steps);" line74="            const s1_100 = s1 * 100;" line75="" line76="            //lum" line77="            const l1 = luminance;" line78="            const l2 = luminance;" line79="            const lDist = l2 - l1;" line80="            const lStep = Math.idiv(lDist, steps);" line81="            const l1_100 = l1 * 100" line82="" line83="            //interpolate" line84="            if (steps === 1) {" line85="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line86="            } else {" line87="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line88="                for (let i = 1; i &lt; steps - 1; i++) {" line89="                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;" line90="                    const s = Math.idiv((s1_100 + i * sStep), 100);" line91="                    const l = Math.idiv((l1_100 + i * lStep), 100);" line92="                    this.setPixelColor(i, hsl(h, s, l));" line93="                }" line94="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line95="            }" line96="            this.show();" line97="        }" line98="" line99="        /**" line100="         * Displays a vertical bar graph based on the `value` and `high` value." line101="         * If `high` is 0, the chart gets adjusted automatically." line102="         * @param value current value to plot" line103="         * @param high maximum value, eg: 255" line104="         */" line105="        //% group=&quot;라이트 제어(심화)&quot;" line106="        //% weight=84 blockGap=8" line107="        //% blockId=neopixel_show_bar_graph block=&quot;%strip|라이트 그래프 효과 - 그래프로 나타낼 값: %value|, 최대값: %high&quot;" line108="        //% strip.defl=strip" line109="        showBarGraph(value: number, high: number): void {" line110="            if (high &lt;= 0) {" line111="                this.clear();" line112="                this.setPixelColor(0, NeoPixelColors.Yellow);" line113="                this.show();" line114="                return;" line115="            }" line116="" line117="            value = Math.abs(value);" line118="            const n = this._length;" line119="            const n1 = n - 1;" line120="            let v = Math.idiv((value * n), high);" line121="            if (v == 0) {" line122="                this.setPixelColor(0, 0x666600);" line123="                for (let j = 1; j &lt; n; ++j)" line124="                    this.setPixelColor(j, 0);" line125="            } else {" line126="                for (let k = 0; k &lt; n; ++k) {" line127="                    if (k &lt;= v) {" line128="                        const b = Math.idiv(k * 255, n1);" line129="                        this.setPixelColor(k, neopixel.rgb(b, 0, 255 - b));" line130="                    }" line131="                    else this.setPixelColor(k, 0);" line132="                }" line133="            }" line134="            this.show();" line135="        }" line136="" line137="        /**" line138="         * Set LED to a given color (range 0-255 for r, g, b)." line139="         * You need to call ``show`` to make the changes visible." line140="         * @param pixeloffset position of the NeoPixel in the strip" line141="         * @param rgb RGB color of the LED" line142="         */" line143="        //% group=&quot;라이트 제어(심화)&quot;" line144="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|의 %pixeloffset|번째 라이트 색상을 %rgb=neopixel_colors으로 설정하기&quot;" line145="        //% strip.defl=strip" line146="        //% blockGap=8" line147="        //% weight=80" line148="        setPixelColor(pixeloffset: number, rgb: number): void {" line149="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line150="        }" line151="" line152="        /**" line153="         * Sets the number of pixels in a matrix shaped strip" line154="         * @param width number of pixels in a row" line155="         */" line156="        //% blockId=neopixel_set_matrix_width block=&quot;%strip|set matrix width %width&quot;" line157="        //% strip.defl=strip" line158="        //% blockGap=8" line159="        //% weight=5" line160="        setMatrixWidth(width: number) {" line161="            this._matrixWidth = Math.min(this._length, width &gt;&gt; 0);" line162="        }" line163="" line164="        /**" line165="         * Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip" line166="         * You need to call ``show`` to make the changes visible." line167="         * @param x horizontal position" line168="         * @param y horizontal position" line169="         * @param rgb RGB color of the LED" line170="         */" line171="        //% blockId=&quot;neopixel_set_matrix_color&quot; block=&quot;%strip|set matrix color at x %x|y %y|to %rgb=neopixel_colors&quot;" line172="        //% strip.defl=strip" line173="        //% weight=4" line174="        setMatrixColor(x: number, y: number, rgb: number) {" line175="            if (this._matrixWidth &lt;= 0) return; // not a matrix, ignore" line176="            x = x &gt;&gt; 0;" line177="            y = y &gt;&gt; 0;" line178="            rgb = rgb &gt;&gt; 0;" line179="            const cols = Math.idiv(this._length, this._matrixWidth);" line180="            if (x &lt; 0 || x &gt;= this._matrixWidth || y &lt; 0 || y &gt;= cols) return;" line181="            let m = x + y * this._matrixWidth;" line182="            this.setPixelColor(m, rgb);" line183="        }" line184="" line185="        /**" line186="         * For NeoPixels with RGB+W LEDs, set the white LED brightness. This only works for RGB+W NeoPixels." line187="         * @param pixeloffset position of the LED in the strip" line188="         * @param white brightness of the white LED" line189="         */" line190="        //% blockId=&quot;neopixel_set_pixel_white&quot; block=&quot;%strip|set pixel white LED at %pixeloffset|to %white&quot;" line191="        //% strip.defl=strip" line192="        //% blockGap=8" line193="        //% weight=80" line194="        setPixelWhiteLED(pixeloffset: number, white: number): void {" line195="            if (this._mode === NeoPixelMode.RGBW) {" line196="                this.setPixelW(pixeloffset &gt;&gt; 0, white &gt;&gt; 0);" line197="            }" line198="        }" line199="" line200="" line201="        /**" line202="         * Send all the changes to the strip." line203="         */" line204="        //% group=&quot;라이트 제어(심화)&quot;" line205="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|라이트를 설정한대로 켜기&quot; blockGap=8" line206="        //% strip.defl=strip" line207="        //% weight=79" line208="        show() {" line209="            // only supported in beta" line210="            // ws2812b.setBufferMode(this.pin, this._mode);" line211="            ws2812b.sendBuffer(this.buf, this.pin);" line212="        }" line213="" line214="        /**" line215="         * Turn off all LEDs." line216="         * You need to call ``show`` to make the changes visible." line217="         */" line218="        //% group=&quot;라이트 제어(기초)&quot;" line219="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|라이트 모두 끄기&quot; blockGap=8" line220="        //% strip.defl=strip" line221="        //% weight=76" line222="        clear(): void {" line223="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line224="            this.buf.fill(0, this.start * stride, this._length * stride);" line225="            //this.show();" line226="        }" line227="" line228="        /**" line229="         * Gets the number of pixels declared on the strip" line230="         */" line231="        //% group=&quot;라이트 제어(심화)&quot;" line232="        //% blockId=&quot;neopixel_length&quot; block=&quot;%strip|라이트의 개수&quot; blockGap=8" line233="        //% strip.defl=strip" line234="        //% weight=60" line235="        length() {" line236="            return this._length;" line237="        }" line238="" line239="        /**" line240="         * Set the brightness of the strip. This flag only applies to future operation." line241="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line242="         */" line243="        //% group=&quot;라이트 제어(기초)&quot;" line244="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|라이트의 밝기를 %brightness로 변경하기&quot; blockGap=8" line245="        //% strip.defl=strip" line246="        //% weight=59" line247="        setBrightness(brightness: number): void {" line248="            this.brightness = brightness &amp; 0xff;" line249="            //this.show();" line250="        }" line251="" line252="" line253="        /**" line254="         * Apply brightness to current colors using a quadratic easing function." line255="        */" line256="" line257="        //% blockId=&quot;neopixel_each_brightness&quot; block=&quot;%strip|ease brightness&quot; blockGap=8" line258="        //% strip.defl=strip" line259="        //% weight=58" line260="        easeBrightness(): void {" line261="            const stride2 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line262="            const br = this.brightness;" line263="            const buf = this.buf;" line264="            const end = this.start + this._length;" line265="            const mid = Math.idiv(this._length, 2);" line266="            for (let o = this.start; o &lt; end; ++o) {" line267="                const p = o - this.start;" line268="                const ledoffset = o * stride2;" line269="                const br2 = p &gt; mid" line270="                    ? Math.idiv(255 * (this._length - 1 - p) * (this._length - 1 - p), (mid * mid))" line271="                    : Math.idiv(255 * p * p, (mid * mid));" line272="                const r = (buf[ledoffset + 0] * br2) &gt;&gt; 8; buf[ledoffset + 0] = r;" line273="                const g = (buf[ledoffset + 1] * br2) &gt;&gt; 8; buf[ledoffset + 1] = g;" line274="                const c = (buf[ledoffset + 2] * br2) &gt;&gt; 8; buf[ledoffset + 2] = c;" line275="                if (stride2 == 4) {" line276="                    const w = (buf[ledoffset + 3] * br2) &gt;&gt; 8; buf[ledoffset + 3] = w;" line277="                }" line278="            }" line279="        }" line280="" line281="        /**" line282="         * Create a range of LEDs." line283="         * @param start offset in the LED strip to start the range" line284="         * @param length number of LEDs in the range. eg: 4" line285="        */" line286="        //% group=&quot;라이트 제어(기초)&quot;" line287="        //% weight=89" line288="        //% blockId=&quot;neopixel_range&quot; block=&quot;%strip|의 %start|번째부터 %length|번째까지 라이트&quot;" line289="        //% strip.defl=strip" line290="        //% length.defl=3" line291="        //% blockSetVariable=range" line292="" line293="        range(start: number, length: number): Strip {" line294="            start = start &gt;&gt; 0;" line295="            length = length &gt;&gt; 0;" line296="            let strip = new Strip();" line297="            strip.buf = this.buf;" line298="            strip.pin = this.pin;" line299="            strip.brightness = this.brightness;" line300="            strip.start = this.start + Math.clamp(0, this._length - 1, start);" line301="            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);" line302="            strip._matrixWidth = 0;" line303="            strip._mode = this._mode;" line304="            return strip;" line305="        }" line306="" line307="        /**" line308="         * Shift LEDs forward and clear with zeros." line309="         * You need to call ``show`` to make the changes visible." line310="         * @param offset number of pixels to shift forward, eg: 1" line311="         */" line312="        //% blockId=&quot;neopixel_shift&quot; block=&quot;%strip|shift pixels by %offset&quot; blockGap=8" line313="        //% strip.defl=strip" line314="        //% weight=40" line315="        shift(offset: number = 1): void {" line316="            offset = offset &gt;&gt; 0;" line317="            const stride3 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line318="            this.buf.shift(-offset * stride3, this.start * stride3, this._length * stride3)" line319="        }" line320="" line321="        /**" line322="         * Rotate LEDs forward." line323="         * You need to call ``show`` to make the changes visible." line324="         * @param offset number of pixels to rotate forward, eg: 1" line325="         */" line326="        //% blockId=&quot;neopixel_rotate&quot; block=&quot;%strip|rotate pixels by %offset&quot; blockGap=8" line327="        //% strip.defl=strip" line328="        //% weight=39" line329="        rotate(offset: number = 1): void {" line330="            offset = offset &gt;&gt; 0;" line331="            const stride4 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line332="            this.buf.rotate(-offset * stride4, this.start * stride4, this._length * stride4)" line333="        }" line334="" line335="        /**" line336="         * Set the pin where the neopixel is connected, defaults to P0." line337="         */" line338="        //% weight=10" line339="        setPin(pin: DigitalPin): void {" line340="            this.pin = pin;" line341="            pins.digitalWritePin(this.pin, 0);" line342="            // don't yield to avoid races on initialization" line343="        }" line344="" line345="        /**" line346="         * Estimates the electrical current (mA) consumed by the current light configuration." line347="         */" line348="        //% weight=9 blockId=neopixel_power block=&quot;%strip|power (mA)&quot;" line349="        //% strip.defl=strip" line350="        power(): number {" line351="            const stride5 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line352="            const end2 = this.start + this._length;" line353="            let q = 0;" line354="            for (let t = this.start; t &lt; end2; ++t) {" line355="                const ledoffset2 = t * stride5;" line356="                for (let u = 0; u &lt; stride5; ++u) {" line357="                    q += this.buf[t + u];" line358="                }" line359="            }" line360="            return Math.idiv(this.length() * 7, 10) /* 0.7mA per neopixel */" line361="                + Math.idiv(q * 480, 10000); /* rought approximation */" line362="        }" line363="" line364="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line365="            if (this._mode === NeoPixelMode.RGB_RGB) {" line366="                this.buf[offset + 0] = red;" line367="                this.buf[offset + 1] = green;" line368="            } else {" line369="                this.buf[offset + 0] = green;" line370="                this.buf[offset + 1] = red;" line371="            }" line372="            this.buf[offset + 2] = blue;" line373="        }" line374="" line375="        private setAllRGB(rgb: number) {" line376="            let red = unpackR(rgb);" line377="            let green = unpackG(rgb);" line378="            let blue = unpackB(rgb);" line379="" line380="            const br3 = this.brightness;" line381="            if (br3 &lt; 255) {" line382="                red = (red * br3) &gt;&gt; 8;" line383="                green = (green * br3) &gt;&gt; 8;" line384="                blue = (blue * br3) &gt;&gt; 8;" line385="            }" line386="            const end3 = this.start + this._length;" line387="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line388="            for (let a = this.start; a &lt; end3; ++a) {" line389="                this.setBufferRGB(a * stride6, red, green, blue)" line390="            }" line391="        }" line392="        private setAllW(white: number) {" line393="            if (this._mode !== NeoPixelMode.RGBW)" line394="                return;" line395="" line396="            let br4 = this.brightness;" line397="            if (br4 &lt; 255) {" line398="                white = (white * br4) &gt;&gt; 8;" line399="            }" line400="            let buf2 = this.buf;" line401="            let end4 = this.start + this._length;" line402="            for (let d = this.start; d &lt; end4; ++d) {" line403="                let ledoffset3 = d * 4;" line404="                buf2[ledoffset3 + 3] = white;" line405="            }" line406="        }" line407="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line408="            if (pixeloffset &lt; 0" line409="                || pixeloffset &gt;= this._length)" line410="                return;" line411="" line412="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line413="            pixeloffset = (pixeloffset + this.start) * stride7;" line414="" line415="            let red2 = unpackR(rgb);" line416="            let green2 = unpackG(rgb);" line417="            let blue2 = unpackB(rgb);" line418="" line419="            let br5 = this.brightness;" line420="            if (br5 &lt; 255) {" line421="                red2 = (red2 * br5) &gt;&gt; 8;" line422="                green2 = (green2 * br5) &gt;&gt; 8;" line423="                blue2 = (blue2 * br5) &gt;&gt; 8;" line424="            }" line425="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line426="        }" line427="        private setPixelW(pixeloffset: number, white: number): void {" line428="            if (this._mode !== NeoPixelMode.RGBW)" line429="                return;" line430="" line431="            if (pixeloffset &lt; 0" line432="                || pixeloffset &gt;= this._length)" line433="                return;" line434="" line435="            pixeloffset = (pixeloffset + this.start) * 4;" line436="" line437="            let br6 = this.brightness;" line438="            if (br6 &lt; 255) {" line439="                white = (white * br6) &gt;&gt; 8;" line440="            }" line441="            let buf3 = this.buf;" line442="            buf3[pixeloffset + 3] = white;" line443="        }" line444="    }" line445="" line446="    /**" line447="     * Create a new NeoPixel driver for `numleds` LEDs." line448="     * @param pin the pin where the neopixel is connected." line449="     * @param numleds number of leds in the strip, eg: 24,30,60,64" line450="     */" line451="    //% blockId=&quot;neopixel_create&quot; block=&quot;%pin|에 연결된 %numleds|개의 %mode|타입 라이트&quot;" line452="    //% group=&quot;라이트 제어(기초)&quot;" line453="    //% weight=90 blockGap=8" line454="    //% parts=&quot;neopixel&quot;" line455="    //% trackArgs=0,2" line456="    //% blockSetVariable=strip" line457="    //% pin.defl=DigitalPin.P8" line458="    //% numleds.defl=4" line459="    export function create(pin: DigitalPin, numleds: number, mode: NeoPixelMode): Strip {" line460="        let strip2 = new Strip();" line461="        let stride8 = mode === NeoPixelMode.RGBW ? 4 : 3;" line462="        strip2.buf = pins.createBuffer(numleds * stride8);" line463="        strip2.start = 0;" line464="        strip2._length = numleds;" line465="        strip2._mode = mode || NeoPixelMode.RGB;" line466="        strip2._matrixWidth = 0;" line467="        strip2.setBrightness(128)" line468="        strip2.setPin(pin)" line469="        return strip2;" line470="    }" line471="" line472="    /**" line473="     * Converts red, green, blue channels into a RGB color" line474="     * @param red value of the red channel between 0 and 255. eg: 255" line475="     * @param green value of the green channel between 0 and 255. eg: 255" line476="     * @param blue value of the blue channel between 0 and 255. eg: 255" line477="     */" line478="    //% weight=20 blockGap=8" line479="    //% group=&quot;색상 블록&quot;" line480="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;빨강(R): %red|초록(G): %green|파랑(B): %blue&quot;" line481="    //% red.min=0 red.max=255" line482="    //% green.min=0 green.max=255" line483="    //% blue.min=0 blue.max=255" line484="    export function rgb(red: number, green: number, blue: number): number {" line485="        return packRGB(red, green, blue);" line486="    }" line487="" line488="    //% weight=40 blockGap=8" line489="    //% group=&quot;색상 블록&quot;" line490="    //% blockId=&quot;pick_color_packrgb&quot; block=&quot;색상 선택 %color&quot;" line491="    //% color.shadow=&quot;colorNumberPicker&quot;" line492="    export function pickColorPackRGB(color: number): number {" line493="        const red3 = unpackR(color);" line494="        const green3 = unpackG(color);" line495="        const blue3 = unpackB(color);" line496="        return packRGB(red3, green3, blue3);" line497="    }" line498="" line499="    /**" line500="     * Gets the RGB value of a known color" line501="    */" line502="    //% group=&quot;색상 블록&quot;" line503="    //% weight=30 blockGap=8" line504="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line505="    export function colors(color: NeoPixelColors): number {" line506="        return color;" line507="    }" line508="" line509="    function packRGB(a: number, b: number, c: number): number {" line510="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line511="    }" line512="    function unpackR(rgb: number): number {" line513="        let e = (rgb &gt;&gt; 16) &amp; 0xFF;" line514="        return e;" line515="    }" line516="    function unpackG(rgb: number): number {" line517="        let f = (rgb &gt;&gt; 8) &amp; 0xFF;" line518="        return f;" line519="    }" line520="    function unpackB(rgb: number): number {" line521="        let b2 = (rgb) &amp; 0xFF;" line522="        return b2;" line523="    }" line524="" line525="    /**" line526="     * Converts a hue saturation luminosity value into a RGB color" line527="     * @param h hue from 0 to 360" line528="     * @param s saturation from 0 to 99" line529="     * @param l luminosity from 0 to 99" line530="     */" line531="    //% group=&quot;색상 블록&quot;" line532="    //% weight=2" line533="    //% blockId=neopixelHSL block=&quot;색조(H): %h|채도(S): %s|명도(L): %l&quot;" line534="    export function hsl(h: number, s: number, l: number): number {" line535="        h = Math.round(h);" line536="        s = Math.round(s);" line537="        l = Math.round(l);" line538="" line539="        h = h % 360;" line540="        s = Math.clamp(0, 99, s);" line541="        l = Math.clamp(0, 99, l);" line542="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line543="        let h12 = Math.idiv(h, 60);//[0,6]" line544="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line545="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line546="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line547="        let r$: number;" line548="        let g$: number;" line549="        let b$: number;" line550="        if (h12 == 0) {" line551="            r$ = c2; g$ = x; b$ = 0;" line552="        } else if (h12 == 1) {" line553="            r$ = x; g$ = c2; b$ = 0;" line554="        } else if (h12 == 2) {" line555="            r$ = 0; g$ = c2; b$ = x;" line556="        } else if (h12 == 3) {" line557="            r$ = 0; g$ = x; b$ = c2;" line558="        } else if (h12 == 4) {" line559="            r$ = x; g$ = 0; b$ = c2;" line560="        } else if (h12 == 5) {" line561="            r$ = c2; g$ = 0; b$ = x;" line562="        }" line563="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line564="        let r2 = r$ + m2;" line565="        let g2 = g$ + m2;" line566="        let b3 = b$ + m2;" line567="        return packRGB(r2, g2, b3);" line568="    }" line569="" line570="    export enum HueInterpolationDirection {" line571="        Clockwise," line572="        CounterClockwise," line573="        Shortest" line574="    }" line575="}" numlines="576"></mutation></block></next></block></next></block></statement></block></xml>